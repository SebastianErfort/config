---
title: Git Cheatsheet
tags: [ vcs, git ]
syntax: markdown
---

# CONFIG
git config --global user.name <name>
git config --global user.email <email>
git config --global core.editor <editor>
git config --global color.ui true
git config --global commit.gpgsign true # set signing of commits globally

git config user.signingkey [KEYID] # GPG key used for signing commits


# STAGING and INDEX
# To stage all changes for commit:
git add --all
git blame <file> # see who commited which line in a file
git reset --soft HEAD^ # undo last (unpushed!) commit, keep changes staged
git reset --hard # undo staged and working directory changes
git reset --hard HEAD~2 # undo las 2 commits

# To undo parts of last commit in a specific file:
git checkout -p HEAD^ -- /path/to/file

# To pick a commit from a branch to current branch. This is different than
# merge as this just applies a single commit from a branch to current branch:
git cherry-pick <commit SHA1>


# COMMIT
git commit -m <message> # commit staged changes with message
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly
# To change the date of an existing commit:
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'
git commit -a -S -m 'Signed commit' #  sign commit
git diff HEAD~3 <file> # show changes in file over last 3 commits
git diff --name-status --diff-filter=U # show unmerged files only in case of conflicts
git diff --name-only <id1> <id2> # show only names of files changed between two commits
git diff --color-moved-ws=ignore-space-at-eol # ignore trailing whitespace (e.g. Markdown)

## EDIT
git commit --amend # edit commit - WARNING: don't touch pushed commits!
git revert <commit SHA> # revert a commit, keep the history of the reverting

# Change author of a commit:
git commit --amend --author="Author Name <email@address.com>"

## TAGS
git tag -a <tag> <commit> -m "<commit message>"
git tag -d <tagname> # delete tag locally
git tag -s v1.5 -m 'my signed 1.5 tag' # sign new tag


# To perform an interactive rebase for the prior 7 commits:
git rebase -i @~7

# BRANCHES
git branch -d <branch> # delete local branch
git branch -D <branch> # force-delete local branch
git push --delete origin <branch> # delete remote branch
# delete all local branches that are already merged
git branch --merged | egrep -v "(^*|main|dev)" | xargs git branch -d
git branch -u upstream/foo # track a remote branch

git diff master...feature # compare branches

git pull <remote> <branch> --rebase # pull remote branch, rebase local differing commits
# pull changes, overwrite local commits
git fetch --all
git reset --hard origin/master
git remote prune origin # remove all stale branches (deleted on remote)
git remote prune $(git remote | tr '\n' ' ') # prune all remotes at once

git checkout -b master upstream/master # checkout a new branch from a different starting point

git diff --no-index /path/to/file/A /path/to/file/B # diff file outside of repository

# PUSH
git push origin master # push to tracked branch master
git push git@github.com:<username>/<repo>.git # push to specific repository
git push origin <tagname> # push a tag
git push --delete origin <tagname> # delete a tag on remote
git push -f # force-push


# STASH
git stash
git stash push -m <message> # stash with message
git stash list
git stash pop # apply last stash and remove from stack
git stash apply stash@{6} # apply specific stash without removing it from stack


# REPOSITORY

# To perform a shallow clone to only get latest commits:
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

git ls-files --others --exclude-standard # list unstracked files
# remove untracked files (and directories -d, dry run -n, ignored files -x)
git clean -f [-d] [-n] [-x]

# To download a specific file/folder (using Subversion, replace tree/master in URL by trunk)
svn export https://github.com/user/repo/trunk/path/to/folder

# sync a fork with the master repo:
git remote add upstream git@github.com:<username>/<repo>.git # Set a new repo
git remote -v                                                # Confirm new remote repo
git fetch upstream                                           # Get branches
git branch -va                                               # List local - remote branches
git checkout master                                          # Checkout local master branch
git checkout -b new_branch                                   # Create and checkout a new branch
git merge upstream/master                                    # Merge remote into local repo
git show 83fb499                                             # Show what a commit did.
git show 83fb499:path/fo/file.ext                            # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                                   # Check difference between branches
git status                                                   # Show the changes from last commit

# import commits from another repo:
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k


# LOG (History)
git log                                                      # Show all the commits
git log -4 --name-only # show files that changed in last 4 commits
git log --follow -- <filename> # show commits where a file was changed
# To view the commit history of a set of files:
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch
git log @{u}.. # view commits that will be pushed
# To view changes that are new on a feature branch:
git log -p feature --not master
git log --pretty="format:%C(auto) %h %G? %aN %s" # short format with ID, ?, author and message title
# %C(auto[,red/green,blue]) etc. colourise output, see git log man page > Pretty Formats

# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool


# SUBMODULES
# To update all submodules for the first time:
git submodule update --init --recursive --remote
# To update already initialised submodules
git submodule update --recursive --remote
# *or*
git pull --recurse-submodules

# vim: ft=bash
